# services/gateway/schema.graphql

"""
A video in the system, tracked by metadata-service.
"""
type Video {
  id: ID! # Unique identifier from metadata-service
  videoName: String! # Original filename
  status: Int! # 0: UPLOADING, 1: TRANSCODING, 2: READY, 3: ERROR
  s3Key: String # S3 URL for HLS/DASH manifest (set when transcoding completes)
  bucketName: String # S3 bucket name
  captionsKey: String # S3 URL for WebVTT captions (set when captioning completes)
  manifestKey: String # HLS manifest path for streaming
  createdAt: String! # Creation timestamp
}

"""
Presigned URL for a single part in a multipart upload.
"""
type PresignedUrl {
  part: Int! # Part number (1-based)
  url: String! # Presigned S3 URL for that part
}

"""
Information required to upload a new video in multiple parts.
"""
type UploadInfo {
  uploadId: ID! # ID of the multipart upload session
  presignedUrls: [PresignedUrl!]! # One presigned URL per chunk/part
}

"""
Input type for a completed part in a multipart upload.
"""
input PartInput {
  ETag: String!
  PartNumber: Int!
}

type Query {
  """
  List all videos (basic info).
  """
  videos: [Video!]!

  """
  Get details for one video by ID.
  """
  video(id: ID!): Video
}

type Mutation {
  """
  Start a multipart upload for a new video; returns presigned URLs.
  """
  initiateMultipartUpload(
    videoName: String!
    fileName: String!
    contentType: String!
    size: Int!
  ): InitiateUploadResponse!

  """
  Generate a presigned URL for a part of a multipart upload.
  """
  generateUploadPartUrl(
    key: String!
    uploadId: String!
    partNumber: Int!
  ): String!

  """
  Complete a multipart upload.
  """
  completeMultipartUpload(
    key: String!
    uploadId: String!
    videoDBID: String!
    parts: [PartInput!]!
  ): CompleteMultipartUploadResponse!

  """
  Abort a multipart upload.
  """
  abortMultipartUpload(
    key: String!
    uploadId: String!
    videoDBID: String!
  ): Boolean!
}

type CompleteMultipartUploadResponse {
  videoDBID: ID!
  bucketName: String!
  status: Int!
}

type InitiateUploadResponse {
  uploadId: ID!
  videoDBID: ID!
  key: String!
}

type Subscription {
  """
  Listen for when a video finishes processing (status becomes READY).
  """
  videoProcessed(id: ID!): Video
}
